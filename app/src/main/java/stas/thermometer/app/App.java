/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stas.thermometer.app;

// Dépendances tierces
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

// Dépendances propres
import java.io.*;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.concurrent.*;

import stas.thermometer.domains.*;
import stas.thermometer.infrastructures.IniConfigurationReader;
import stas.thermometer.presentations.ThermometerPresenter;
import stas.thermometer.presentations.ThermometerView;
import stas.thermometer.views.ConsoleThermometerView;

public class App {
    private static final Logger LOG = LogManager.getLogger("stas");


    public static void main(String[] args) throws FileNotFoundException {

        // Vérification qu'un fichier de configuration est passé en parametres
        int configFileIndex = Arrays.asList(args).indexOf("--config-file");
        if (configFileIndex == -1 || configFileIndex == args.length - 1) {
            LOG.error(" missing configuration file argument");
            return;
        }
        String resource = args[1];

        // Lecture du ficher de configuration
        InputStream inputStream = App.class.getClassLoader().getResourceAsStream(resource);
        if (inputStream == null) {
            LOG.error("Configuration file not found");
            return;
        }

        // Récuperer les info du thermometre
        IniConfigurationReader iniFileReader = new IniConfigurationReader(inputStream);
        String thermometerName = iniFileReader.getThermometerName();
        if (thermometerName == null) {
            LOG.error("missing required property name");
            return;
        }

        // Initialisation du thermometre avec ses informations (nom, foramt de température et format de dateTime)
        Configuration config = new Configuration(iniFileReader.getDateTimeFormat(), iniFileReader.getTemperatureFormat(), thermometerName);

        // Construction de mes objets
        ObserverManager observerManager = new ObserverManager();
        Profiles profile = iniFileReader.getProfile();
        TemperatureProbe probe = new TemperatureProbe(profile);
        HumidityProbe humidityProbe = new HumidityProbe(profile);

        final String user = iniFileReader.getServerDbInfo()[1];
        final String password = iniFileReader.getServerDbInfo()[2];
        final String url = iniFileReader.getServerDbInfo()[0];
        DatabaseManager<Measurement> measurementManager = new DatabaseManager<>(url, user, password);
        DatabaseManager<Humidity> humidityManager = new DatabaseManager<>(url, user, password);
        MeasurementAggregator aggregator = new MeasurementAggregator(observerManager, profile, thermometerName, measurementManager, humidityManager);
        // Ajouter l'agrégateur comme observateur de la sonde
        probe.addObserver(aggregator);
        humidityProbe.addObserver(aggregator);

        // Créer le présentateur et la vue
        ThermometerView view = new ConsoleThermometerView();
        ThermometerPresenter presenter = new ThermometerPresenter();
        presenter.setView(view);
        presenter.setAggregator(aggregator);
        presenter.setConfiguration(config);
        presenter.setProbes(probe, humidityProbe);

        // Associer le présentateur à la sonde et à l'agrégateur
        observerManager.addAverageObserver(presenter);
        probe.addObserver(presenter);
        humidityProbe.addObserver(presenter);
        observerManager.addAlertObserver(presenter);

        // Configurer et démarrer le rafraîchissement périodique de la sonde
        ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();
        RefreshProbeTask refreshTask = new RefreshProbeTask(probe, humidityProbe);
        presenter.displayThermometerName();
        scheduledExecutor.scheduleAtFixedRate(refreshTask, 0, 100, TimeUnit.MILLISECONDS);

        scheduledExecutor.scheduleAtFixedRate(() -> {
            if(!measurementManager.testConnection()){
                view.display("stas thermometer : unable to insert data. trying to reconnect to database..");
            }else {
                if (aggregator.hasNewMeasurement()) {
                    aggregator.calculateAndNotifyAverageTemperature();
                    aggregator.calculateAndNotifyAverageHumidity();
                }
            }


        }, 0, 2, TimeUnit.SECONDS);  // calcule la moyenne toutes les 2 secondes

        // Démarrer la boucle principale
        presenter.runMainLoop();

        // Arrêter l'exécuteur planifié
        scheduledExecutor.shutdown();
    }

}


